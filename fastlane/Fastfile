fastlane_version "2.55.0"

default_platform :ios

require 'fileutils'

platform :ios do
  before_all do
    developer_id = "shinsotsu_technology+apple2016@cyberagent.co.jp"
    developer_password ="Vk7fvNzv"

    ENV["PRIVATE_KEY_CERT_NAME"] = "K2JZWBH82M.p12"
    ENV["PRIVATE_KEY_CERT_PASSWORD"] = ""
    ENV["FASTLANE_USER"] = developer_id
    ENV["FASTLANE_PASSWORD"] = developer_password
    ENV["PRODUCE_USERNAME"] = developer_id
    ENV["CERT_USERNAME"] = developer_id
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    ENV["CRASHLYTICS_API_TOKEN"] = "6f6934a7db46c0427c85ff1a091ea58c7c3b8d81"
    ENV["CRASHLYTICS_BUILD_SECRET"] = "99117beb3d99a34d032dccc4f7df44a970aaca9d9f6640983439d44fabbc55dc"
  end

  desc 'Register device to apple developer account :: Usage: fastlane update_device'
  lane :update_devices do |options|
    register_devices(devices_file: "./fastlane/Devicesfile.txt")
    slack(
      message: "Successfully to register all new devices!"
    )
  end

  desc "Submit a new Beta Build to Fabric :: Usage: fastlane beta id:app identifier scheme:app scheme name configuration:app configuration"
  lane :beta do |options|
    app_identifier = options[:id]
    scheme = options[:scheme]
    xcproject = "#{scheme}.xcodeproj"
    workspace = "#{scheme}.xcworkspace"
    configuration = options[:configuration]
    bin_name = "#{scheme}.ipa"
    build_derectory = "./fastlane/build"
    bin_path = "#{build_derectory}/#{bin_name}"
    resources_path = "./fastlane/resources"
    tmp_resources_output_path = "#{resources_path}/tmp"
    certificate_path = "#{resources_path}/#{ENV["PRIVATE_KEY_CERT_NAME"]}"

    produce(
      app_identifier: app_identifier,
      app_name: scheme,
      skip_itc: true
    )

    import_certificate(
      keychain_name: "login",
      certificate_path: certificate_path,
      certificate_password: ENV["PRIVATE_KEY_CERT_PASSWORD"]
    )

    cert(output_path: tmp_resources_output_path)

    sigh(
      force: true,
      provisioning_name: "#{scheme} Dev Adhoc",
      app_identifier: app_identifier,
      adhoc: true,
      output_path: tmp_resources_output_path
    )

    parsed_profile = FastlaneCore::ProvisioningProfile.parse(lane_context[SharedValues::SIGH_PROFILE_PATH])
    profile_name = parsed_profile["Name"]
    team_identifier = parsed_profile["TeamIdentifier"].first
    team_name = parsed_profile["TeamName"]

    xcodebuild_args = {
      PROVISIONING_PROFILE_SPECIFIER: profile_name,
      CODE_SIGN_IDENTITY: "iPhone Distribution: #{team_name} (#{team_identifier})",
    }

    xcodebuild_args = xcodebuild_args.map do |k,v|
      "#{k.to_s.shellescape}=#{v.shellescape}"
    end.join ' '

    disable_automatic_code_signing(path: xcproject)

    update_project_team(
      path: xcproject,
      teamid: team_identifier
    )

    gym(
      workspace: workspace,
      configuration: configuration,
      scheme: scheme,
      export_method: "ad-hoc",
      output_name: bin_name,
      output_directory: build_derectory,
      silent: true,
      clean: true,
      xcargs: xcodebuild_args
    )

    crashlytics(
      crashlytics_path: './Pods/Crashlytics/iOS/Crashlytics.framework',
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      notes: "Latest version #{scheme}",
      ipa_path: bin_path,
      groups: ["intern_tester"],
      notifications: false
    )

    rm_dir = "../#{tmp_resources_output_path}"
    FileUtils.rm_rf(rm_dir) if Dir.exist?(rm_dir)

    slack(
      message: "Successfully deployed new #{scheme} App Update."
    )
  end
end